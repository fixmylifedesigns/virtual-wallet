This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-26T13:11:38.005Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
docker-compose.yml
jsconfig.json
next.config.mjs
package.json
postcss.config.mjs
prisma/schema.prisma
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
src/app/api/auth/login/route.js
src/app/api/auth/signup/route.js
src/app/auth/page.js
src/app/dashboard/page.js
src/app/globals.css
src/app/layout.js
src/app/login/page.js
src/app/page.js
src/app/signup/page.js
src/components/CreditCard.js
src/components/dashboard/FinancialDashboard.js
src/components/loading.js
src/components/ui/button.js
src/components/ui/card.js
src/lib/jwt.js
src/lib/prisma.js
src/lib/test-data.js
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: docker-compose.yml
================
# docker-compose.yml
version: '3.8'
services:
  db:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=digitalwallet
    ports:
      - '5433:5432'
    volumes:
      - db:/var/lib/postgresql/data
      
volumes:
  db:
    driver: local

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: false,
};

export default nextConfig;

================
File: package.json
================
{
  "name": "virtual-wallet",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@prisma/client": "^5.22.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.460.0",
    "next": "15.0.3",
    "react": "19.0.0-rc-66855b96-20241106",
    "react-dom": "19.0.0-rc-66855b96-20241106",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/jsonwebtoken": "^9.0.7",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "postcss": "^8",
    "prisma": "^5.22.0",
    "tailwindcss": "^3.4.1"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: prisma/schema.prisma
================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wallet    Wallet?
}

model Wallet {
  id        String   @id @default(cuid())
  balance   Float    @default(0)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: src/app/api/auth/login/route.js
================
// src/app/api/auth/login/route.js
import { NextResponse } from "next/server";
import { compare } from "bcryptjs";
import { z } from "zod";
import { prisma } from "@/lib/prisma";
import { generateToken } from "@/lib/jwt";

const loginSchema = z.object({
  email: z.string().email(),
  password: z.string(),
});

export async function POST(req) {
  try {
    const body = await req.json();

    // Validate input
    const result = loginSchema.safeParse(body);
    if (!result.success) {
      return NextResponse.json(
        { error: "Invalid input", details: result.error.flatten() },
        { status: 400 }
      );
    }

    const { email, password } = result.data;

    // Find user
    const user = await prisma.user.findUnique({
      where: { email },
    });

    if (!user) {
      return NextResponse.json(
        { error: "Invalid credentials" },
        { status: 401 }
      );
    }

    // Verify password
    const isValid = await compare(password, user.password);
    if (!isValid) {
      return NextResponse.json(
        { error: "Invalid credentials" },
        { status: 401 }
      );
    }

    // Generate JWT token
    const token = generateToken({
      userId: user.id,
      email: user.email,
    });

    return NextResponse.json({
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
      },
      token,
    });
  } catch (error) {
    console.error("Login error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/auth/signup/route.js
================
// src/app/api/auth/signup/route.js
import { NextResponse } from "next/server";
import { hash } from "bcryptjs";
import { z } from "zod";
import { prisma } from "@/lib/prisma";
import { generateToken } from "@/lib/jwt";

// Input validation schema
const signupSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
  firstName: z.string().min(1),
  lastName: z.string().min(1),
});

export async function POST(req) {
  try {
    const body = await req.json();

    // Validate input
    const result = signupSchema.safeParse(body);
    if (!result.success) {
      return NextResponse.json(
        { error: "Invalid input", details: result.error.flatten() },
        { status: 400 }
      );
    }

    const { email, password, firstName, lastName } = result.data;

    // Check if user already exists
    const existingUser = await prisma.user.findUnique({
      where: { email },
    });

    if (existingUser) {
      return NextResponse.json(
        { error: "User already exists" },
        { status: 409 }
      );
    }

    // Hash password and create user
    const hashedPassword = await hash(password, 12);

    const user = await prisma.user.create({
      data: {
        email,
        password: hashedPassword,
        firstName,
        lastName,
        wallet: {
          create: {
            balance: 0,
          },
        },
      },
    });

    // Generate JWT token
    const token = generateToken({
      userId: user.id,
      email: user.email,
    });

    return NextResponse.json({
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
      },
      token,
    });
  } catch (error) {
    console.error("Signup error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: src/app/auth/page.js
================
'use client'
import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'

export default function Auth() {
  const [isLogin, setIsLogin] = useState(true)
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    firstName: '',
    lastName: ''
  })
  const [error, setError] = useState('')
  const router = useRouter()
  const [isClient, setIsClient] = useState(false)

  useEffect(() => {
    setIsClient(true)
  }, [])

  const handleSubmit = async (e) => {
    e.preventDefault()
    setError('')

    try {
      const endpoint = isLogin ? '/api/auth/login' : '/api/auth/signup'
      const res = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(isLogin ? {
          email: formData.email,
          password: formData.password
        } : formData)
      })

      const data = await res.json()

      if (!res.ok) {
        throw new Error(data.error || `${isLogin ? 'Login' : 'Signup'} failed`)
      }

      // Only set token if we're on the client side
      if (typeof window !== 'undefined') {
        localStorage.setItem('token', data.token)
      }
      router.push('/dashboard')

    } catch (err) {
      setError(err.message)
    }
  }

  const handleChange = (e) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }))
  }

  if (!isClient) {
    return null // or a loading spinner
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            {isLogin ? "Sign in to your account" : "Create your account"}
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            {isLogin ? "Don't have an account? " : "Already have an account? "}
            <button
              onClick={() => setIsLogin(!isLogin)}
              className="font-medium text-indigo-600 hover:text-indigo-500"
            >
              {isLogin ? "Sign up" : "Sign in"}
            </button>
          </p>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          {error && (
            <div className="text-red-500 text-sm text-center">{error}</div>
          )}
          <div className="rounded-md shadow-sm space-y-4">
            {!isLogin && (
              <>
                <div>
                  <label htmlFor="firstName" className="sr-only">
                    First Name
                  </label>
                  <input
                    id="firstName"
                    name="firstName"
                    type="text"
                    required={!isLogin}
                    className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                    placeholder="First Name"
                    value={formData.firstName}
                    onChange={handleChange}
                  />
                </div>
                <div>
                  <label htmlFor="lastName" className="sr-only">
                    Last Name
                  </label>
                  <input
                    id="lastName"
                    name="lastName"
                    type="text"
                    required={!isLogin}
                    className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                    placeholder="Last Name"
                    value={formData.lastName}
                    onChange={handleChange}
                  />
                </div>
              </>
            )}
            <div>
              <label htmlFor="email" className="sr-only">
                Email address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                required
                className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="Email address"
                value={formData.email}
                onChange={handleChange}
              />
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="Password"
                value={formData.password}
                onChange={handleChange}
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              {isLogin ? "Sign in" : "Sign up"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

================
File: src/app/dashboard/page.js
================
// In src/app/dashboard/page.js
"use client"
import FinancialDashboard from "@/components/dashboard/FinancialDashboard";

export default function DashboardPage() {
  return <FinancialDashboard />;
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  background-color: white;
}

================
File: src/app/layout.js
================
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        suppressHydrationWarning
      >
        {children}
      </body>
    </html>
  );
}

================
File: src/app/login/page.js
================
// src/app/login/page.js
"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      const res = await fetch("/api/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
      });

      const data = await res.json();

      if (!res.ok) {
        throw new Error(data.error || "Login failed");
      }

      // Store token in localStorage
      localStorage.setItem("token", data.token);
      router.push("/dashboard");
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-8 p-8 bg-white rounded-lg shadow">
        <div>
          <h2 className="text-center text-3xl font-extrabold text-gray-900">
            Sign in to your account
          </h2>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          {error && (
            <div className="text-red-500 text-sm text-center">{error}</div>
          )}
          <div>
            <label htmlFor="email" className="sr-only">
              Email address
            </label>
            <input
              id="email"
              name="email"
              type="email"
              required
              className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Email address"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
          </div>
          <div>
            <label htmlFor="password" className="sr-only">
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              required
              className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
          <div>
            <button
              type="submit"
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Sign in
            </button>
          </div>
          <div className="text-sm text-center">
            <Link
              href="/signup"
              className="font-medium text-indigo-600 hover:text-indigo-500"
            >
              Don&apos;t have an account? Sign up
            </Link>
          </div>
        </form>
      </div>
    </div>
  );
}

================
File: src/app/page.js
================
import { ChevronRight, Shield, Wallet, Zap } from "lucide-react";
import Link from "next/link";
import CreditCard from "../components/creditcard";

export default function LandingPage() {
  return (
    <div className="min-h-screen bg-black text-zinc-200">
      {/* Navigation */}
      <nav className="border-b border-zinc-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex-shrink-0">
              <span className="text-2xl font-bold text-yellow-500">
                VirtualWallet
              </span>
            </div>
            <div className="hidden md:flex space-x-8 items-center">
              <Link
                href="#features"
                className="text-zinc-400 hover:text-yellow-500"
              >
                Features
              </Link>
              <Link
                href="#security"
                className="text-zinc-400 hover:text-yellow-500"
              >
                Security
              </Link>
              <Link
                href="#pricing"
                className="text-zinc-400 hover:text-yellow-500"
              >
                Pricing
              </Link>
              <Link
                href="/auth"
                className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-black bg-yellow-500 hover:bg-yellow-400"
              >
                Get Started
              </Link>
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <div className="relative overflow-hidden">
        <div className="max-w-7xl mx-auto pt-16 pb-12 px-4 sm:pt-24 sm:pb-20">
          {/* Hero Content */}
          <div className="text-center space-y-8 relative z-10">
            <h1 className="text-5xl md:text-7xl font-extrabold tracking-tight">
              <span className="block text-zinc-200">Create Virtual Cards</span>
              <span className="block text-yellow-500">in Seconds</span>
            </h1>
            <p className="mt-6 text-xl md:text-2xl max-w-2xl mx-auto text-zinc-400">
              Generate secure, temporary virtual cards for your online
              purchases. Take control of your digital payments with unlimited
              virtual cards.
            </p>
            <div className="flex flex-col sm:flex-row justify-center gap-4 mt-8">
              <Link
                href="/auth"
                className="inline-flex items-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-black bg-yellow-500 hover:bg-yellow-400"
              >
                Start Creating Cards <ChevronRight className="ml-2" />
              </Link>
              <a
                href="#features"
                className="inline-flex items-center px-8 py-3 border border-zinc-800 text-base font-medium rounded-md text-zinc-200 bg-transparent hover:bg-zinc-800"
              >
                Learn More
              </a>
            </div>
          </div>

          {/* Floating Cards */}
          <div className="mt-20 relative">
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="bg-yellow-500 w-96 h-96 rounded-full opacity-10 blur-3xl"></div>
            </div>
            <div className="relative flex justify-center perspective-1000">
              <div className="flex space-x-4 -rotate-12">
                <CreditCard
                  cardNumber="4532 1111 2222 3333"
                  cardHolder="JOHN DOE"
                  expiryDate="12/25"
                  variant="yellow"
                  type="PLATINUM"
                />

                {/* Blue variant */}
                <CreditCard
                  cardNumber="5678 9012 3456 7890"
                  cardHolder="JANE SMITH"
                  expiryDate="03/27"
                  variant="blue"
                  type="BUSINESS"
                  className="-rotate-12"
                />

                {/* Purple variant */}
                <CreditCard
                  cardNumber="9876 5432 1098 7654"
                  cardHolder="ALEX JOHNSON"
                  expiryDate="09/26"
                  variant="purple"
                  type="PREMIUM"
                />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Features Section */}
      <div id="features" className="py-24 bg-zinc-900">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h2 className="text-3xl font-extrabold text-zinc-200 sm:text-4xl">
              Everything you need for secure online payments
            </h2>
            <p className="mt-4 text-xl text-zinc-400">
              Create, manage, and secure your digital transactions with ease.
            </p>
          </div>

          <div className="mt-20 grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
            {[
              {
                icon: <Zap className="text-yellow-500" size={24} />,
                title: "Instant Card Creation",
                description:
                  "Generate virtual cards instantly for your online purchases. Set limits and expiration dates for better control.",
              },
              {
                icon: <Shield className="text-yellow-500" size={24} />,
                title: "Bank-Grade Security",
                description:
                  "Your virtual cards are protected with advanced encryption and real-time fraud monitoring.",
              },
              {
                icon: <Wallet className="text-yellow-500" size={24} />,
                title: "Flexible Management",
                description:
                  "Create temporary or permanent cards, set spending limits, and track all your transactions in one place.",
              },
            ].map((feature) => (
              <div
                key={feature.title}
                className="p-6 bg-zinc-800/50 rounded-xl border border-zinc-700/50 hover:bg-zinc-800/80 transition-colors"
              >
                <div className="flex items-center justify-center h-12 w-12 rounded-md bg-zinc-800">
                  {feature.icon}
                </div>
                <div className="mt-6">
                  <h3 className="text-lg font-medium text-zinc-200">
                    {feature.title}
                  </h3>
                  <p className="mt-2 text-zinc-400">{feature.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Footer */}
      <footer className="bg-black border-t border-zinc-800">
        <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-2 gap-8 md:grid-cols-4">
            <div>
              <h3 className="text-sm font-semibold text-yellow-500 tracking-wider uppercase">
                Product
              </h3>
              <ul className="mt-4 space-y-4">
                <li>
                  <a href="#" className="text-zinc-400 hover:text-yellow-500">
                    Features
                  </a>
                </li>
                <li>
                  <a href="#" className="text-zinc-400 hover:text-yellow-500">
                    Security
                  </a>
                </li>
                <li>
                  <a href="#" className="text-zinc-400 hover:text-yellow-500">
                    Pricing
                  </a>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="text-sm font-semibold text-yellow-500 tracking-wider uppercase">
                Company
              </h3>
              <ul className="mt-4 space-y-4">
                <li>
                  <a href="#" className="text-zinc-400 hover:text-yellow-500">
                    About
                  </a>
                </li>
                <li>
                  <a href="#" className="text-zinc-400 hover:text-yellow-500">
                    Blog
                  </a>
                </li>
                <li>
                  <a href="#" className="text-zinc-400 hover:text-yellow-500">
                    Contact
                  </a>
                </li>
              </ul>
            </div>
          </div>
          <div className="mt-8 border-t border-zinc-800 pt-8">
            <p className="text-base text-zinc-400">
              &copy; 2024 VirtualWallet. All rights reserved.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}

================
File: src/app/signup/page.js
================
// src/app/signup/page.js
"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";

export default function Signup() {
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    firstName: "",
    lastName: "",
  });
  const [error, setError] = useState("");
  const router = useRouter();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      const res = await fetch("/api/auth/signup", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      const data = await res.json();

      if (!res.ok) {
        throw new Error(data.error || "Signup failed");
      }

      // Store token in localStorage
      localStorage.setItem("token", data.token);
      router.push("/dashboard");
    } catch (err) {
      setError(err.message);
    }
  };

  const handleChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-8 p-8 bg-white rounded-lg shadow">
        <div>
          <h2 className="text-center text-3xl font-extrabold text-gray-900">
            Create your account
          </h2>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          {error && (
            <div className="text-red-500 text-sm text-center">{error}</div>
          )}
          <div className="rounded-md shadow-sm space-y-4">
            <div>
              <label htmlFor="firstName" className="sr-only">
                First Name
              </label>
              <input
                id="firstName"
                name="firstName"
                type="text"
                required
                className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="First Name"
                value={formData.firstName}
                onChange={handleChange}
              />
            </div>
            <div>
              <label htmlFor="lastName" className="sr-only">
                Last Name
              </label>
              <input
                id="lastName"
                name="lastName"
                type="text"
                required
                className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="Last Name"
                value={formData.lastName}
                onChange={handleChange}
              />
            </div>
            <div>
              <label htmlFor="email" className="sr-only">
                Email address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                required
                className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="Email address"
                value={formData.email}
                onChange={handleChange}
              />
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="Password"
                value={formData.password}
                onChange={handleChange}
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Sign up
            </button>
          </div>
          <div className="text-sm text-center">
            <Link
              href="/login"
              className="font-medium text-indigo-600 hover:text-indigo-500"
            >
              Already have an account? Sign in
            </Link>
          </div>
        </form>
      </div>
    </div>
  );
}

================
File: src/components/CreditCard.js
================
import React from "react";

const LogoIcon = () => (
  <svg width="40" height="40" viewBox="0 0 17.5 16.2">
    <path
      d="M3.2 0l5.4 5.6L14.3 0l3.2 3v9L13 16.2V7.8l-4.4 4.1L4.5 8v8.2L0 12V3l3.2-3z"
      fill="white"
    />
  </svg>
);

const WavePattern = () => (
  <svg
    viewBox="0 3.71 26.959 38.787"
    width="26.959"
    height="38.787"
    fill="white"
    className="opacity-80"
  >
    <path d="M19.709 3.719c.266.043.5.187.656.406 4.125 5.207 6.594 11.781 6.594 18.938 0 7.156-2.469 13.73-6.594 18.937-.195.336-.57.531-.957.492a.9946.9946 0 0 1-.851-.66c-.129-.367-.035-.777.246-1.051 3.855-4.867 6.156-11.023 6.156-17.718 0-6.696-2.301-12.852-6.156-17.719-.262-.317-.301-.762-.102-1.121.204-.36.602-.559 1.008-.504z" />
    <path d="M13.74 7.563c.231.039.442.164.594.343 3.508 4.059 5.625 9.371 5.625 15.157 0 5.785-2.113 11.097-5.625 15.156-.363.422-1 .472-1.422.109-.422-.363-.472-1-.109-1.422 3.211-3.711 5.156-8.551 5.156-13.843 0-5.293-1.949-10.133-5.156-13.844-.27-.309-.324-.75-.141-1.114.188-.367.578-.582.985-.542h.093z" />
    <path d="M7.584 11.438c.227.031.438.144.594.312 2.953 2.863 4.781 6.875 4.781 11.313 0 4.433-1.828 8.449-4.781 11.312-.398.387-1.035.383-1.422-.016-.387-.398-.383-1.035.016-1.421 2.582-2.504 4.187-5.993 4.187-9.875 0-3.883-1.605-7.372-4.187-9.875-.321-.282-.426-.739-.266-1.133.164-.395.559-.641.984-.617h.094zM1.178 15.531c.121.02.238.063.344.125 2.633 1.414 4.437 4.215 4.437 7.407 0 3.195-1.797 5.996-4.437 7.406-.492.258-1.102.07-1.36-.422-.257-.492-.07-1.102.422-1.359 2.012-1.075 3.375-3.176 3.375-5.625 0-2.446-1.371-4.551-3.375-5.625-.441-.204-.676-.692-.551-1.165.122-.468.567-.785 1.051-.742h.094z" />
  </svg>
);

const Chip = () => (
  <div className="relative w-[50px] h-[40px] rounded bg-gradient-to-bl from-[#ffecc7] to-[#d0b978] overflow-hidden">
    <div className="absolute inset-0">
      <div className="absolute w-full h-[1px] bg-[#333] top-[13px]"></div>
      <div className="absolute w-full h-[1px] bg-[#333] top-[20px]"></div>
      <div className="absolute w-full h-[1px] bg-[#333] top-[28px]"></div>
      <div className="absolute w-[1px] h-[50px] bg-[#333] left-[25px]"></div>
      <div className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-5 h-7 border border-[#333] rounded bg-gradient-to-bl from-[#efdbab] to-[#e1cb94]"></div>
    </div>
  </div>
);

const formatCardNumber = (number) => {
  return (
    number
      .toString()
      .replace(/\s/g, "")
      .match(/.{1,4}/g)
      ?.join(" ") || ""
  );
};

const CARD_VARIANTS = {
  black: {
    background: 'from-[#111111] to-[#555555]',
    stripe: 'from-[#ff6767] to-[#ff4545]'
  },
  blue: {
    background: 'from-[#1a1f71] to-[#2b3595]',
    stripe: 'from-[#2193b0] to-[#6dd5ed]'
  },
  purple: {
    background: 'from-[#31087B] to-[#653780]',
    stripe: 'from-[#FA2FB5] to-[#FF69B4]'
  },
  yellow: {
    background: 'from-zinc-900 to-zinc-800',
    stripe: 'from-yellow-500 to-yellow-600'
  },
  golden: {
    background: 'from-[#462523] to-[#cb9b51]',
    stripe: 'from-[#f6e27a] to-[#cb9b51]'
  },
  custom: (bgFrom, bgTo, stripeFrom, stripeTo) => ({
    background: `from-[${bgFrom}] to-[${bgTo}]`,
    stripe: `from-[${stripeFrom}] to-[${stripeTo}]`
  })
};

const CreditCard = ({
  cardNumber = "5453 2000 0000 0000",
  cardHolder = "MR FILIP VITAS",
  expiryDate = "11/22",
  variant = "black",
  className = "",
  type = "INVESTOR", // or any other card type
}) => {
  const colors = CARD_VARIANTS[variant] || CARD_VARIANTS.black;
  const formattedNumber = formatCardNumber(cardNumber);

  return (
    <div
      className={`w-[340px] h-[216px] relative group perspective-1000 ${className}`}
    >
      <div
        className={`w-full h-full rounded-xl bg-gradient-to-r ${colors.background} text-white relative overflow-hidden shadow-xl transition-transform duration-500 group-hover:scale-105`}
      >
        {/* Stripes */}
        <div
          className={`absolute right-0 top-0 h-full w-[200px] bg-gradient-to-b ${colors.stripe} -skew-x-[20deg] translate-x-[50px] shadow-lg`}
        ></div>
        <div
          className={`absolute right-0 top-0 h-full w-[180px] bg-gradient-to-b ${colors.stripe} skew-x-[15deg] translate-x-[50px] shadow-lg`}
        ></div>

        {/* Content container */}
        <div className="relative z-10 p-6 h-full">
          {/* Logo */}
          <div className="absolute top-6 right-6">
            <LogoIcon />
          </div>

          {/* Card Type */}
          <div className="font-mono uppercase text-sm tracking-wider">
            {type}
          </div>

          {/* Chip and wave */}
          <div className="mt-6 flex items-center space-x-4">
            <Chip />
            <div className="w-8 h-8">
              <WavePattern />
            </div>
          </div>

          {/* Card number */}
          <div className="mt-6 flex space-x-4 font-mono text-[23px] tracking-wider">
            {formattedNumber.split(" ").map((group, index) => (
              <div key={index}>{group}</div>
            ))}
          </div>

          {/* Card details */}
          <div className="mt-4 flex justify-between items-end">
            <div>
              <div className="text-[9px] text-white/80 uppercase font-mono">
                exp. end:
              </div>
              <div className="font-mono text-sm">{expiryDate}</div>
            </div>
            <div className="font-mono text-sm uppercase">{cardHolder}</div>
          </div>

          {/* Mastercard circles */}
          <div className="absolute bottom-6 right-6 flex">
            <div className="w-[25px] h-[25px] rounded-full bg-[#eb001b]"></div>
            <div className="w-[25px] h-[25px] rounded-full bg-[#f79e1b] opacity-70 -ml-3"></div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreditCard;

================
File: src/components/dashboard/FinancialDashboard.js
================
import React, { useState } from "react";
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  LayoutDashboard,
  CreditCard,
  Wallet,
  FileText,
  DollarSign,
  Building,
  PlusCircle,
  LogOut,
  MoreVertical,
  ArrowDownCircle,
  ArrowUpCircle,
  Search,
} from "lucide-react";

const FinancialDashboard = () => {
  const [activeTab, setActiveTab] = useState("dashboard");

  const sidebarItems = [
    {
      icon: <LayoutDashboard size={20} />,
      label: "Dashboard",
      id: "dashboard",
    },
    { icon: <CreditCard size={20} />, label: "Virtual Cards", id: "cards" },
    { icon: <Wallet size={20} />, label: "Wallet", id: "wallet" },
    { icon: <Building size={20} />, label: "Bank Accounts", id: "banks" },
    { icon: <FileText size={20} />, label: "Statements", id: "statements" },
    {
      icon: <DollarSign size={20} />,
      label: "Transactions",
      id: "transactions",
    },
  ];

  const virtualCards = [
    { id: 1, type: "Visa", lastFour: "4242", limit: 5000, balance: 1250 },
    { id: 2, type: "Mastercard", lastFour: "8888", limit: 3000, balance: 500 },
  ];

  const transactions = [
    {
      icon: <ArrowUpCircle className="text-green-500" size={20} />,
      title: "Deposit from Bank",
      amount: "+$2,500.00",
      date: "2024-11-26",
      status: "completed",
    },
    {
      icon: <ArrowDownCircle className="text-red-500" size={20} />,
      title: "Withdrawal to Chase",
      amount: "-$1,800.00",
      date: "2024-11-25",
      status: "pending",
    },
  ];

  return (
    <div className="flex min-h-screen bg-black text-zinc-200">
      {/* Sidebar */}
      <div className="w-64 bg-zinc-900 p-4 flex flex-col">
        <div className="mb-8">
          <h1 className="text-xl font-bold text-yellow-500">VirtualWallet</h1>
        </div>

        <nav className="flex-1">
          {sidebarItems.map((item) => (
            <div
              key={item.id}
              onClick={() => setActiveTab(item.id)}
              className={`flex items-center space-x-3 p-3 rounded-lg mb-1 cursor-pointer ${
                activeTab === item.id
                  ? "bg-zinc-800 text-yellow-500"
                  : "hover:bg-zinc-800"
              }`}
            >
              {item.icon}
              <span>{item.label}</span>
            </div>
          ))}
        </nav>

        <div className="border-t border-zinc-800 pt-4 mt-auto">
          <div className="flex items-center space-x-3 p-3">
            <div className="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center text-black font-bold">
              U
            </div>
            <div>
              <div className="text-sm">user@example.com</div>
              <div className="text-xs text-yellow-500">Premium Account</div>
            </div>
          </div>
          <div className="flex items-center space-x-2 p-3 cursor-pointer hover:bg-zinc-800 rounded-lg">
            <LogOut size={20} />
            <span>Logout</span>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 p-8">
        {/* Quick Actions Bar */}
        <div className="flex justify-between items-center mb-8">
          <h2 className="text-2xl font-bold text-zinc-200">Welcome back</h2>
          <div className="flex space-x-4">
            <Button className="bg-yellow-500 hover:bg-yellow-600 text-black">
              <PlusCircle className="mr-2" size={20} />
              New Virtual Card
            </Button>
            <Button className="bg-zinc-800 hover:bg-zinc-700">
              <Building className="mr-2" size={20} />
              Connect Bank
            </Button>
          </div>
        </div>

        {/* Main Dashboard Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Balance Card */}
          <Card className="bg-zinc-900 border-zinc-800">
            <CardContent className="p-6">
              <div className="mb-4">
                <h3 className="text-lg text-zinc-400">Total Balance</h3>
                <div className="text-3xl font-bold text-yellow-500">
                  $150,000.00
                </div>
              </div>

              <div className="flex justify-between text-sm text-zinc-400">
                <div>
                  <div>Available Credit</div>
                  <div className="text-zinc-200">$847,500.00</div>
                </div>
                <div>
                  <div>Credit Limit</div>
                  <div className="text-zinc-200">$1,000,000.00</div>
                </div>
              </div>

              <div className="w-full bg-zinc-800 rounded-full h-2 my-4">
                <div className="bg-yellow-500 h-2 rounded-full w-2/12" />
              </div>
            </CardContent>
          </Card>

          {/* Virtual Cards */}
          <Card className="bg-zinc-900 border-zinc-800">
            <CardContent className="p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg text-zinc-400">Virtual Cards</h3>
                <Button
                  variant="outline"
                  className="text-yellow-500 border-yellow-500 hover:bg-yellow-500 hover:text-black"
                >
                  View All
                </Button>
              </div>

              <div className="space-y-4">
                {virtualCards.map((card) => (
                  <div
                    key={card.id}
                    className="p-4 bg-zinc-800 rounded-lg flex justify-between items-center"
                  >
                    <div className="flex items-center space-x-4">
                      <CreditCard className="text-yellow-500" size={24} />
                      <div>
                        <div className="text-sm text-zinc-400">
                          {card.type} ****{card.lastFour}
                        </div>
                        <div className="text-yellow-500">
                          ${card.balance.toLocaleString()}
                        </div>
                      </div>
                    </div>
                    <div className="text-sm text-zinc-400">
                      Limit: ${card.limit.toLocaleString()}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Recent Transactions */}
          <Card className="bg-zinc-900 border-zinc-800 lg:col-span-2">
            <CardContent className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-lg text-zinc-400">Recent Transactions</h3>
                <div className="flex space-x-4">
                  <div className="relative">
                    <Search
                      className="absolute left-3 top-2.5 text-zinc-400"
                      size={20}
                    />
                    <input
                      type="text"
                      className="bg-zinc-800 border-zinc-700 rounded-lg pl-10 pr-4 py-2 text-zinc-300"
                      placeholder="Search transactions..."
                    />
                  </div>
                  <Button
                    variant="outline"
                    className="text-yellow-500 border-yellow-500 hover:bg-yellow-500 hover:text-black"
                  >
                    Export
                  </Button>
                </div>
              </div>

              <div className="space-y-2">
                {transactions.map((transaction, index) => (
                  <div
                    key={index}
                    className="flex items-center justify-between p-4 bg-zinc-800/50 rounded-lg hover:bg-zinc-800"
                  >
                    <div className="flex items-center space-x-4">
                      {transaction.icon}
                      <div>
                        <div className="text-zinc-300">{transaction.title}</div>
                        <div className="text-sm text-zinc-400">
                          {transaction.date}
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-4">
                      <div className="text-zinc-300">{transaction.amount}</div>
                      <span
                        className={`px-2 py-1 rounded text-xs ${
                          transaction.status === "completed"
                            ? "bg-green-500/20 text-green-500"
                            : "bg-yellow-500/20 text-yellow-500"
                        }`}
                      >
                        {transaction.status}
                      </span>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="text-zinc-400 hover:text-zinc-300"
                      >
                        <MoreVertical size={20} />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default FinancialDashboard;

================
File: src/components/loading.js
================
// src/components/loading.js
export default function Loading() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-indigo-600"></div>
    </div>
  );
}

================
File: src/components/ui/button.js
================
import React from "react";

const Button = ({
  children,
  variant = "default",
  size = "default",
  className = "",
  ...props
}) => {
  const baseStyles =
    "inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-yellow-500 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none";

  const variants = {
    default: "bg-yellow-500 text-black hover:bg-yellow-600",
    outline:
      "border border-zinc-800 bg-transparent hover:bg-zinc-800 text-zinc-200",
    ghost: "hover:bg-zinc-800 text-zinc-200",
    secondary: "bg-zinc-800 text-zinc-200 hover:bg-zinc-700",
  };

  const sizes = {
    default: "h-10 px-4 py-2",
    sm: "h-8 px-3 text-sm",
    lg: "h-12 px-8",
    icon: "h-10 w-10",
  };

  return (
    <button
      className={`
        ${baseStyles}
        ${variants[variant]}
        ${sizes[size]}
        ${className}
      `}
      {...props}
    >
      {children}
    </button>
  );
};

export { Button };
export default Button;

================
File: src/components/ui/card.js
================
import React from "react";

const Card = ({ className = "", children, ...props }) => {
  return (
    <div
      className={`rounded-lg border border-zinc-800 bg-zinc-900 text-zinc-200 shadow-sm ${className}`}
      {...props}
    >
      {children}
    </div>
  );
};

const CardHeader = ({ className = "", children, ...props }) => {
  return (
    <div className={`flex flex-col space-y-1.5 p-6 ${className}`} {...props}>
      {children}
    </div>
  );
};

const CardTitle = ({ className = "", children, ...props }) => {
  return (
    <h3
      className={`text-lg font-semibold leading-none tracking-tight ${className}`}
      {...props}
    >
      {children}
    </h3>
  );
};

const CardDescription = ({ className = "", children, ...props }) => {
  return (
    <p className={`text-sm text-zinc-400 ${className}`} {...props}>
      {children}
    </p>
  );
};

const CardContent = ({ className = "", children, ...props }) => {
  return (
    <div className={`p-6 pt-0 ${className}`} {...props}>
      {children}
    </div>
  );
};

const CardFooter = ({ className = "", children, ...props }) => {
  return (
    <div className={`flex items-center p-6 pt-0 ${className}`} {...props}>
      {children}
    </div>
  );
};

export {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
};

export default Card;

================
File: src/lib/jwt.js
================
// src/lib/jwt.js
import jwt from "jsonwebtoken";

const JWT_SECRET = process.env.JWT_SECRET;
const JWT_EXPIRES_IN = "24h";

export function generateToken(payload) {
  return jwt.sign(payload, JWT_SECRET, {
    expiresIn: JWT_EXPIRES_IN,
  });
}

export function verifyToken(token) {
  return jwt.verify(token, JWT_SECRET);
}

================
File: src/lib/prisma.js
================
// src/lib/prisma.js
import { PrismaClient } from "@prisma/client";

const globalForPrisma = global;

export const prisma = globalForPrisma.prisma ?? new PrismaClient();

if (process.env.NODE_ENV !== "production") {
  globalForPrisma.prisma = prisma;
}

================
File: src/lib/test-data.js
================
// src/lib/test-data.js
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function createTestData() {
  try {
    // Create a user with a wallet
    const user = await prisma.user.create({
      data: {
        email: 'test@example.com',
        password: 'hashed_password_here',
        firstName: 'Test',
        lastName: 'User',
        wallet: {
          create: {
            balance: 1000.00 // Starting balance of 1000
          }
        }
      },
      include: {
        wallet: true // Include the wallet in the response
      }
    })
    
    console.log('Test user created:', user)
    
  } catch (error) {
    console.error('Error creating test data:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createTestData()

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};
